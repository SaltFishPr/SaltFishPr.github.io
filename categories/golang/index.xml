<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on 咸鱼硕的博客</title><link>https://saltfishpr.github.io/categories/golang/</link><description>Recent content in golang on 咸鱼硕的博客</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 03 Dec 2021 01:56:06 +0800</lastBuildDate><atom:link href="https://saltfishpr.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Clean Code</title><link>https://saltfishpr.github.io/p/go-clean-code/</link><pubDate>Fri, 03 Dec 2021 01:56:06 +0800</pubDate><guid>https://saltfishpr.github.io/p/go-clean-code/</guid><description>Clean Code Code is clean if it can be understood easily – by everyone on the team. Clean code can be read and enhanced by a developer other than its original author. With understandability comes readability, changeability, extensibility and maintainability.
General rules Follow standard conventions. Keep it simple stupid. Simpler is always better. Reduce complexity as much as possible. Boy scout rule. Leave the campground cleaner than you found it.</description></item><item><title>Go 语言资源整合</title><link>https://saltfishpr.github.io/p/go-%E8%AF%AD%E8%A8%80%E8%B5%84%E6%BA%90%E6%95%B4%E5%90%88/</link><pubDate>Thu, 02 Dec 2021 00:46:39 +0800</pubDate><guid>https://saltfishpr.github.io/p/go-%E8%AF%AD%E8%A8%80%E8%B5%84%E6%BA%90%E6%95%B4%E5%90%88/</guid><description>Golang Resource uber-guide: uber go guide
clean-go-article: go clean code
常用包 viper: 配置读取
zap: 日志输出
lumberjack: 日志滚动记录器
validator: 数据校验
cast: 类型转换
golang-underscore: 工具库，函数式编程助手
carbon: 时间库的扩展
cron: 定时任务
ants: goroutine 池
wire: 依赖注入
cobra: 命令行程序
resty: HTTP/REST 客户端
testify: 测试库，断言、mock
jsoniter: 标准库 encoding/json 的升级，可直接替换，高性能
gjson: 快速从 json 中获取值
fasthttp: 标准库 net/http 的升级，更快
agollo: 连接 apollo 配置中心
msgp: MessagePack 序列化，比 json 更快，数据量更小
redsync: Redis 分布式锁
sqlx: 标准库 database/sql 的扩展
kafka-go: kafka 库</description></item><item><title>Learning Go</title><link>https://saltfishpr.github.io/p/learning-go/</link><pubDate>Tue, 22 Sep 2020 00:00:00 +0800</pubDate><guid>https://saltfishpr.github.io/p/learning-go/</guid><description>The Go Programming Language 简介 Go 是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。于 2009 年 11 月正式宣布推出， 1.0 版本在 2012 年 3 月发布。之后，Go 广泛应用于 Google 的产品以及许多其他组织和开源项目。Go 程序员常常被称为地鼠（gopher），因此地鼠也是 Go 的吉祥物。
Gopher image
在 Go 语言出现之前，开发者们总是面临非常艰难的抉择，究竟是使用执行速度快但是编译速度并不理想的语言（如：C++），还是使用编译速度较快但执行效率不佳的语言（如：.NET、Java），或者说开发难度较低但执行速度一般的动态语言呢？显然，Go 语言在这 3 个条件之间做到了最佳的平衡：快速编译，高效执行，易于开发。
特性：
为并发设计：协程（goroutine）、通道（channel）、同步原语（标准库 sync 包）： 为网络设计：标准库 net 包 类型安全，内存安全 良好的代码跨平台性 与 C 代码互相调用，调用汇编代码 开源 其它吸引我的地方：
25 个保留关键字，学习快，上手快 编译型语言，构建时生成多个平台的二进制文件，部署启动快 go 工具链，提供构建、执行、依赖管理、代码检查、代码格式化等功能 Hello World 只使用标准库构建 http 服务。
Hello World 向每个访问的客户端打印中文的“你好, 世界!”和当前的时间信息。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;time&amp;#34; ) func main() { fmt.</description></item></channel></rss>