<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 咸鱼硕的博客</title><link>https://saltfishpr.github.io/post/</link><description>Recent content in Posts on 咸鱼硕的博客</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 25 Nov 2021 00:49:31 +0800</lastBuildDate><atom:link href="https://saltfishpr.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Cheat Sheet</title><link>https://saltfishpr.github.io/p/git-cheat-sheet/</link><pubDate>Thu, 25 Nov 2021 00:49:31 +0800</pubDate><guid>https://saltfishpr.github.io/p/git-cheat-sheet/</guid><description>Git 初次运行 Git 前的配置 设置用户名和邮箱
git config --global user.name &amp;#34;Salt Fish&amp;#34; git config --global user.email saltfishpr@gmail.com 配置默认文本编辑器
git config --global core.editor code 检查配置信息
git config --list 设置保存密码 # 记住密码（默认15分钟） git config --global credential.helper cache # 自己设置时间 git config --global credential.helper cache --timeout=3600 这样就设置一个小时之后失效 # 长期存储密码 git config --global credential.helper store 增加远程地址的时候带上密码
git remote -v # https://yourname:password@github.com/saltfishpr/go-learning.git Git clone/push 太慢 在国内，github 域名被限制，导致 git clone 很慢，只有 40KB/s 的速度
Windows 使用 nslookup 查询 github 对应的 IP 地址</description></item><item><title>Kaggle Pandas</title><link>https://saltfishpr.github.io/p/kaggle-pandas/</link><pubDate>Mon, 25 May 2020 00:00:00 +0800</pubDate><guid>https://saltfishpr.github.io/p/kaggle-pandas/</guid><description>Kaggle Pandas 入门 读取数据集
import pandas as pd reviews = pd.read_csv(&amp;#34;~/Programming/datasets/winemag-data-130k-v2.csv&amp;#34;) 分组和排序 对分数分组求和
reviews.groupby(&amp;#34;points&amp;#34;).points.count() Output:
points 80 397 81 692 82 1836 ... 98 77 99 33 100 19 Name: points, dtype: int64 获得相同评分葡萄酒的最低价格
reviews.groupby(&amp;#34;points&amp;#34;).price.min() Output:
points 80 5.0 81 5.0 82 4.0 ... 98 50.0 99 44.0 100 80.0 Name: price, dtype: float64 从每个酒庄中选择第一瓶葡萄酒的名称
reviews.groupby(&amp;#39;winery&amp;#39;).apply(lambda df: df.title.iloc[0]) Output:
winery 1+1=3 1+1=3 NV Rosé Sparkling (Cava) 10 Knots 10 Knots 2010 Viognier (Paso Robles) 100 Percent Wine 100 Percent Wine 2015 Moscato (California) 1000 Stories 1000 Stories 2013 Bourbon Barrel Aged Zinfande.</description></item><item><title>Python 环境管理</title><link>https://saltfishpr.github.io/p/python-%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</link><pubDate>Thu, 26 Mar 2020 00:00:00 +0800</pubDate><guid>https://saltfishpr.github.io/p/python-%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</guid><description>conda 常用 换源 创建 .condarc 配置文件
conda config --set show_channel_urls yes 用文本编辑器打开 ~/.condarc 填入以下内容
channels: - defaults show_channel_urls: true channel_alias: https://mirrors.tuna.tsinghua.edu.cn/anaconda default_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2 custom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud 命令 创建有最新版本的 python 的环境 conda create -n &amp;lt;env-name&amp;gt; python=3
删除环境 conda remove -n &amp;lt;env-name&amp;gt; --all
清除缓存 conda clean -a
pip 常用 换源 在 ~/.config/pip/pip.conf 中添加如下内容</description></item><item><title>Effective Python</title><link>https://saltfishpr.github.io/p/effective-python/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0800</pubDate><guid>https://saltfishpr.github.io/p/effective-python/</guid><description>《Effective+Python》读书笔记 个人学习笔记
如果有侵权情况，请给我发邮件通知我删除 526191197@qq.com
用 zip 函数同时遍历多个迭代器 用 zip 可以把两个或两个以上的迭代器封装成生成器，以便稍后求值
names = [&amp;#39;aaaa&amp;#39;, &amp;#39;bb&amp;#39;, &amp;#39;ccc&amp;#39;] letters = [len(n) for n in names] for name, count in zip(names, letters): if count &amp;gt; max_letters: longest_name = name max_letters = count 当 zip 封装的任意一个迭代器耗尽，zip 就不再产生元组
itertools 内置模块中的 zip_longest 函数可以平行地遍历多个迭代器，不用考虑长度是否相等。
for/else 的含义 for i in range(3): print(&amp;#39;Loop %d&amp;#39; % i) if i == 1: break else: print(&amp;#39;Else block!&amp;#39;) 这里在 for 循环后面紧跟 else 语句，在 for 正常执行完时会执行 else 语句；而如果经过 break 跳出，会导致程序不执行 else 块</description></item><item><title>Build a GitHub Pages</title><link>https://saltfishpr.github.io/p/build-a-github-pages/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0800</pubDate><guid>https://saltfishpr.github.io/p/build-a-github-pages/</guid><description>Github Pages 个人博客搭建  应朋友的强烈要求在这里记录下使用 github pages + jekyll 搭建个人网站的步骤。我自己花了两天梳理了一下 jekyll 模板的目录结构和使用方法，只会些简单的修改但是基本够用了（毕竟不是前端人）。
准备 注册 github 账号 创建一个仓库，命名必须为&amp;lt;username&amp;gt;.github.io，百度上任意搜索都有介绍过程，这里就不再赘述了 windows: 安装 git，下载安装最新版本即可
安装 msys2
安装好 msys2 后，首先记得切换镜像源，不然会因为网速太慢心态崩溃。在设置镜像源的时候，可以将除了清华源的其他源全部注释掉，提高下载速度。
安装 ruby，这里下载 2.6.5 版本，因为最新版后面会提示版本不匹配。
下载过程可能很久&amp;hellip;如果觉得慢可以下载不包含 devkit 的版本。 安装时在 Select Components 界面不用勾选 msys2，因为在上一步中已经安装好了。 在 Finish 时勾选 Run &amp;lsquo;ridk install&amp;rsquo; to setup msys2&amp;hellip; 弹出配置界面，在这里我选择 3 并按回车。由于配置过 msys2 的源，这里下载安装速度很快。 安装完成后，打开 msys2 命令行窗口，为 rubygems配置源。 安装rubygems，下载后解压缩，在文件夹中打开 git bash 输入 ruby setup.</description></item><item><title>Data Mining</title><link>https://saltfishpr.github.io/p/data-mining/</link><pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate><guid>https://saltfishpr.github.io/p/data-mining/</guid><description>数据挖掘学习笔记 书上的源码在官网上可以注册账号下载，这里只为记录自己的学习过程。
如果有侵权情况，请给我发邮件通知我删除 526191197@qq.com
此笔记的代码均在 pycharm - python3.8 中运行通过
学习数据挖掘，让数据服务于人类
第一章 亲和性分析 亲和性分析根据样本个体（物体）之间的相似度，确定他们的关系亲疏。应用场景有以下几个方面：
向用户投放定向广告 为用户提供推荐（如歌曲推荐，电影推荐等） 名词：
规则：一条规则由前提条件和结论两部分组成 支持度：数据集中规则应验的次数 置信度：规则（结果）出现的次数 / 条件出现的次数（条件相同的规则数量），衡量规则的准确率 # -*- coding: utf-8 -*- import numpy as np from collections import defaultdict from operator import itemgetter if __name__ == &amp;#39;__main__&amp;#39;: dataset_filename = &amp;#34;affinity_dataset.txt&amp;#34; X = np.loadtxt(dataset_filename) n_samples, n_features = X.shape # 样本数，特征数 features = [&amp;#34;bread&amp;#34;, &amp;#34;milk&amp;#34;, &amp;#34;cheese&amp;#34;, &amp;#34;apples&amp;#34;, &amp;#34;bananas&amp;#34;] # 商品名列表 # 如果xxx，那么xxx 就是一条规则。规则由前提条件和结论两部分组成 # 这里注意&amp;#39;如果买A则他们会买B&amp;#39;和&amp;#39;如果买B则他们会买A&amp;#39;不是一个规则，在下面的循环中体现出来 valid_rules = defaultdict(int) # 规则应验 invalid_rules = defaultdict(int) # 规则无效 num_occurences = defaultdict(int) # 商品购买数量字典 for sample in X: # 对数据集里的每个消费者 for premise in range(n_features): if sample[premise] == 0: # 如果这个商品没有买，继续看下一个商品 continue num_occurences[premise] += 1 # 记录这个商品购买数量 for conclusion in range(n_features): if premise == conclusion: # 跳过此商品 continue if sample[conclusion] == 1: valid_rules[(premise, conclusion)] += 1 # 规则应验 else: invalid_rules[(premise, conclusion)] += 1 # 规则无效 support = valid_rules # 支持度字典，即规则应验次数 confidence = defaultdict(float) # 置信度字典 for premise, conclusion in valid_rules.</description></item><item><title>Python Encode</title><link>https://saltfishpr.github.io/p/python-encode/</link><pubDate>Fri, 06 Mar 2020 00:00:00 +0800</pubDate><guid>https://saltfishpr.github.io/p/python-encode/</guid><description>编码  编码是数据从一种格式变为另一种格式的过程。通过编码，我们可以把数据以不同的格式保存和转移。
Python3 字符串类型 str(Unicode) 通过 encode 编码后形成 byte(二进制数据)。 二进制数据通过decode转换成 Unicode 字符。
示例 1：
s1 = &amp;#34;中文&amp;#34; s2 = s1.encode(&amp;#34;utf-8&amp;#34;) print(type(s1), s1) print(type(s2), s2) output 1:
&amp;lt;class 'str'&amp;gt; 中文 &amp;lt;class 'bytes'&amp;gt; b'\xe4\xb8\xad\xe6\x96\x87'  文件中存储的都是 byte 这样一个一个二进制数，所以在将 str 存入文件或从文件读取内容时需要指明编码类型。
经验总结 写 python 程序的时候，把编码和解码操作放在界面的最外围来做，程序的核心部分使用 Unicode 字符类型(Python3 中的 str)。
在写文件时注明编码类型
with open(file_path, &amp;#39;w&amp;#39;,encode=&amp;#39;utf-8&amp;#39;) as f: f.write(data) 在使用 requests 库获取响应信息时，指明编码类型
def send_req(url): headers = {} req = requests.</description></item><item><title>Markdown Cheat Sheet</title><link>https://saltfishpr.github.io/p/markdown-cheat-sheet/</link><pubDate>Thu, 05 Mar 2020 00:00:00 +0800</pubDate><guid>https://saltfishpr.github.io/p/markdown-cheat-sheet/</guid><description>Markdown 常用写法大全 分割线：
--- 标题：
# 一级标题 ## 二级标题 ### 三级标题 ###### 六级标题 一级标题 二级标题 三级标题 六级标题 斜体文字
_斜体_ 斜体
加粗文字
**加粗** 加粗
段落和换行：
新一段落需要空一行 新的一段 或者在最后加上两个空格 换行 新一段落需要空一行
新的一段
或者在最后加上两个空格
换行
列表：
- 列表 - 列表 - 列表 1. 列表 2. 列表 3. 列表 列表 列表 列表 列表 列表 列表 在列表中分段或者换行要在后面的段和行中加上 4 个空格
- 项目一，段落一 项目一，段落二 - 项目二，第一行 项目二，第二行 项目一，段落一</description></item><item><title>制作雷蛇鼠标宏</title><link>https://saltfishpr.github.io/p/%E5%88%B6%E4%BD%9C%E9%9B%B7%E8%9B%87%E9%BC%A0%E6%A0%87%E5%AE%8F/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate><guid>https://saltfishpr.github.io/p/%E5%88%B6%E4%BD%9C%E9%9B%B7%E8%9B%87%E9%BC%A0%E6%A0%87%E5%AE%8F/</guid><description>&lt;p>推送好友的 b 站视频，顺便测试嵌入式网页（狗头)&lt;/p></description></item><item><title>First Blog</title><link>https://saltfishpr.github.io/p/first-blog/</link><pubDate>Tue, 03 Mar 2020 00:00:00 +0800</pubDate><guid>https://saltfishpr.github.io/p/first-blog/</guid><description>This is the beginning of my blog.</description></item></channel></rss>