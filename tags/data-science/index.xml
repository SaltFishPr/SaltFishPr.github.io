<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>data science on 咸鱼硕的博客</title><link>https://saltfishpr.github.io/tags/data-science/</link><description>Recent content in data science on 咸鱼硕的博客</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 25 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://saltfishpr.github.io/tags/data-science/index.xml" rel="self" type="application/rss+xml"/><item><title>Kaggle Pandas</title><link>https://saltfishpr.github.io/p/kaggle-pandas/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://saltfishpr.github.io/p/kaggle-pandas/</guid><description>Kaggle Pandas 入门 读取数据集
import pandas as pd reviews = pd.read_csv(&amp;#34;~/Programming/datasets/winemag-data-130k-v2.csv&amp;#34;) 分组和排序 对分数分组求和
reviews.groupby(&amp;#34;points&amp;#34;).points.count() Output:
points 80 397 81 692 82 1836 ... 98 77 99 33 100 19 Name: points, dtype: int64 获得相同评分葡萄酒的最低价格
reviews.groupby(&amp;#34;points&amp;#34;).price.min() Output:
points 80 5.0 81 5.0 82 4.0 ... 98 50.0 99 44.0 100 80.0 Name: price, dtype: float64 从每个酒庄中选择第一瓶葡萄酒的名称
reviews.groupby(&amp;#39;winery&amp;#39;).apply(lambda df: df.title.iloc[0]) Output:
winery 1+1=3 1+1=3 NV Rosé Sparkling (Cava) 10 Knots 10 Knots 2010 Viognier (Paso Robles) 100 Percent Wine 100 Percent Wine 2015 Moscato (California) 1000 Stories 1000 Stories 2013 Bourbon Barrel Aged Zinfande.</description></item><item><title>Data Mining</title><link>https://saltfishpr.github.io/p/data-mining/</link><pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate><guid>https://saltfishpr.github.io/p/data-mining/</guid><description>数据挖掘学习笔记 书上的源码在官网上可以注册账号下载，这里只为记录自己的学习过程。
如果有侵权情况，请给我发邮件通知我删除 526191197@qq.com
此笔记的代码均在 pycharm - python3.8 中运行通过
学习数据挖掘，让数据服务于人类
第一章 亲和性分析 亲和性分析根据样本个体（物体）之间的相似度，确定他们的关系亲疏。应用场景有以下几个方面：
向用户投放定向广告 为用户提供推荐（如歌曲推荐，电影推荐等） 名词：
规则：一条规则由前提条件和结论两部分组成 支持度：数据集中规则应验的次数 置信度：规则（结果）出现的次数 / 条件出现的次数（条件相同的规则数量），衡量规则的准确率 # -*- coding: utf-8 -*- import numpy as np from collections import defaultdict from operator import itemgetter if __name__ == &amp;#39;__main__&amp;#39;: dataset_filename = &amp;#34;affinity_dataset.txt&amp;#34; X = np.loadtxt(dataset_filename) n_samples, n_features = X.shape # 样本数，特征数 features = [&amp;#34;bread&amp;#34;, &amp;#34;milk&amp;#34;, &amp;#34;cheese&amp;#34;, &amp;#34;apples&amp;#34;, &amp;#34;bananas&amp;#34;] # 商品名列表 # 如果xxx，那么xxx 就是一条规则。规则由前提条件和结论两部分组成 # 这里注意&amp;#39;如果买A则他们会买B&amp;#39;和&amp;#39;如果买B则他们会买A&amp;#39;不是一个规则，在下面的循环中体现出来 valid_rules = defaultdict(int) # 规则应验 invalid_rules = defaultdict(int) # 规则无效 num_occurences = defaultdict(int) # 商品购买数量字典 for sample in X: # 对数据集里的每个消费者 for premise in range(n_features): if sample[premise] == 0: # 如果这个商品没有买，继续看下一个商品 continue num_occurences[premise] += 1 # 记录这个商品购买数量 for conclusion in range(n_features): if premise == conclusion: # 跳过此商品 continue if sample[conclusion] == 1: valid_rules[(premise, conclusion)] += 1 # 规则应验 else: invalid_rules[(premise, conclusion)] += 1 # 规则无效 support = valid_rules # 支持度字典，即规则应验次数 confidence = defaultdict(float) # 置信度字典 for premise, conclusion in valid_rules.</description></item></channel></rss>